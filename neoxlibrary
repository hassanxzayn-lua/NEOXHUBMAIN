-- NeoxLib: A Professional Roblox UI Library
local NeoxLib = {}
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local HttpService = game:GetService("HttpService")

-- Utility Functions
local function saveConfig(folder, config)
    if not isfolder(folder) then
        makefolder(folder)
    end
    writefile(folder .. "/config.json", HttpService:JSONEncode(config))
end

local function loadConfig(folder)
    if isfile(folder .. "/config.json") then
        return HttpService:JSONDecode(readfile(folder .. "/config.json"))
    end
    return {}
end

-- Window Creation
function NeoxLib:MakeWindow(config)
    local windowConfig = {
        Name = config.Name or "NeoxLib",
        HidePremium = config.HidePremium or false,
        SaveConfig = config.SaveConfig or false,
        ConfigFolder = config.ConfigFolder or "NeoxLibConfig"
    }
    local savedConfig = windowConfig.SaveConfig and loadConfig(windowConfig.ConfigFolder) or {}

    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "NeoxLib"
    screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    screenGui.ResetOnSpawn = false

    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 600, 0, 400)
    frame.Position = UDim2.new(0.5, -300, 0.5, 200)
    frame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    frame.BorderSizePixel = 0
    frame.Parent = screenGui
    frame.ClipsDescendants = true
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 10)
    corner.Parent = frame

    local titleBar = Instance.new("Frame")
    titleBar.Size = UDim2.new(1, 0, 0, 40)
    titleBar.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    titleBar.BorderSizePixel = 0
    titleBar.Parent = frame
    local titleCorner = Instance.new("UICorner")
    titleCorner.CornerRadius = UDim.new(0, 10)
    titleCorner.Parent = titleBar

    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(0.7, 0, 1, 0)
    titleLabel.Position = UDim2.new(0, 15, 0, 0)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = windowConfig.Name
    titleLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.TextSize = 18
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Parent = titleBar

    local closeButton = Instance.new("TextButton")
    closeButton.Size = UDim2.new(0, 30, 0, 30)
    closeButton.Position = UDim2.new(1, -40, 0, 5)
    closeButton.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
    closeButton.Text = "X"
    closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    closeButton.Font = Enum.Font.Gotham
    closeButton.TextSize = 16
    closeButton.Parent = titleBar
    local closeCorner = Instance.new("UICorner")
    closeCorner.CornerRadius = UDim.new(0, 5)
    closeCorner.Parent = closeButton

    -- Dragging
    local dragging, dragInput, dragStart, startPos
    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    titleBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)

    -- Tab System
    local tabContainer = Instance.new("Frame")
    tabContainer.Size = UDim2.new(0, 150, 1, -40)
    tabContainer.Position = UDim2.new(0, 0, 0, 40)
    tabContainer.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    tabContainer.BorderSizePixel = 0
    tabContainer.Parent = frame

    local contentFrame = Instance.new("Frame")
    contentFrame.Size = UDim2.new(0, 440, 1, -40)
    contentFrame.Position = UDim2.new(0, 160, 0, 40)
    contentFrame.BackgroundTransparency = 1
    contentFrame.Parent = frame
    contentFrame.ClipsDescendants = true

    local tabs = {}
    local currentTab = nil

    -- Notification System
    local function notify(text, duration)
        local notif = Instance.new("Frame")
        notif.Size = UDim2.new(0, 250, 0, 60)
        notif.Position = UDim2.new(1, 260, 1, -70)
        notif.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
        notif.BorderSizePixel = 0
        notif.Parent = screenGui
        local notifCorner = Instance.new("UICorner")
        notifCorner.CornerRadius = UDim.new(0, 5)
        notifCorner.Parent = notif

        local notifText = Instance.new("TextLabel")
        notifText.Size = UDim2.new(1, -10, 1, -10)
        notifText.Position = UDim2.new(0, 5, 0, 5)
        notifText.BackgroundTransparency = 1
        notifText.Text = text
        notifText.TextColor3 = Color3.fromRGB(220, 220, 220)
        notifText.Font = Enum.Font.Gotham
        notifText.TextSize = 14
        notifText.TextWrapped = true
        notifText.Parent = notif

        local tweenIn = TweenService:Create(notif, TweenInfo.new(0.3), {Position = UDim2.new(1, -260, 1, -70)})
        tweenIn:Play()
        wait(duration or 3)
        local tweenOut = TweenService:Create(notif, TweenInfo.new(0.3), {Position = UDim2.new(1, 260, 1, -70)})
        tweenOut:Play()
        tweenOut.Completed:Connect(function()
            notif:Destroy()
        end)
    end

    closeButton.MouseButton1Click:Connect(function()
        if windowConfig.SaveConfig then
            saveConfig(windowConfig.ConfigFolder, savedConfig)
        end
        local tween = TweenService:Create(frame, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {Position = UDim2.new(0.5, -300, 0.5, 200)})
        tween:Play()
        tween.Completed:Wait()
        screenGui:Destroy()
    end)

    -- Tab Creation
    function Window:MakeTab(config)
        local name = config.Name or "Tab"
        local icon = config.Icon or ""
        local premiumOnly = config.PremiumOnly or false

        if premiumOnly and not game.Players.LocalPlayer.MembershipType == Enum.MembershipType.Premium and not windowConfig.HidePremium then
            notify("This tab is for Premium users only!", 3)
            return nil
        end

        local tabButton = Instance.new("TextButton")
        tabButton.Size = UDim2.new(1, -10, 0, 35)
        tabButton.Position = UDim2.new(0, 5, 0, 5 + (#tabs * 40))
        tabButton.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        tabButton.Text = (icon ~= "" and " " or "") .. name
        tabButton.TextColor3 = Color3.fromRGB(200, 200, 200)
        tabButton.Font = Enum.Font.Gotham
        tabButton.TextSize = 14
        tabButton.TextXAlignment = Enum.TextXAlignment.Left
        tabButton.Parent = tabContainer
        local tabCorner = Instance.new("UICorner")
        tabCorner.CornerRadius = UDim.new(0, 5)
        tabCorner.Parent = tabButton

        local tabContent = Instance.new("Frame")
        tabContent.Size = UDim2.new(1, 0, 1, 0)
        tabContent.BackgroundTransparency = 1
        tabContent.Parent = contentFrame
        tabContent.Visible = false

        local scrollingFrame = Instance.new("ScrollingFrame")
        scrollingFrame.Size = UDim2.new(1, 0, 1, 0)
        scrollingFrame.BackgroundTransparency = 1
        scrollingFrame.ScrollBarThickness = 5
        scrollingFrame.Parent = tabContent
        scrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0)

        local listLayout = Instance.new("UIListLayout")
        listLayout.Padding = UDim.new(0, 10)
        listLayout.Parent = scrollingFrame
        listLayout.SortOrder = Enum.SortOrder.LayoutOrder

        tabButton.MouseButton1Click:Connect(function()
            if currentTab ~= tabContent then
                if currentTab then
                    currentTab.Visible = false
                end
                tabContent.Visible = true
                currentTab = tabContent
                for _, btn in pairs(tabContainer:GetChildren()) do
                    if btn:IsA("TextButton") then
                        btn.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                    end
                end
                tabButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
            end
        end)

        table.insert(tabs, {button = tabButton, content = tabContent})
        if #tabs == 1 then
            tabButton:Click()
        end

        local tabAPI = {}

        function tabAPI:AddSection(config)
            local sectionName = config.Name or "Section"

            local sectionFrame = Instance.new("Frame")
            sectionFrame.Size = UDim2.new(0, 410, 0, 0)
            sectionFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
            sectionFrame.BorderSizePixel = 0
            sectionFrame.Parent = scrollingFrame
            local secCorner = Instance.new("UICorner")
            secCorner.CornerRadius = UDim.new(0, 5)
            secCorner.Parent = sectionFrame

            local sectionTitle = Instance.new("TextLabel")
            sectionTitle.Size = UDim2.new(1, -10, 0, 30)
            sectionTitle.Position = UDim2.new(0, 5, 0, 5)
            sectionTitle.BackgroundTransparency = 1
            sectionTitle.Text = sectionName
            sectionTitle.TextColor3 = Color3.fromRGB(220, 220, 220)
            sectionTitle.Font = Enum.Font.GothamBold
            sectionTitle.TextSize = 16
            sectionTitle.TextXAlignment = Enum.TextXAlignment.Left
            sectionTitle.Parent = sectionFrame

            local sectionContent = Instance.new("Frame")
            sectionContent.Size = UDim2.new(1, 0, 0, 0)
            sectionContent.Position = UDim2.new(0, 0, 0, 40)
            sectionContent.BackgroundTransparency = 1
            sectionContent.Parent = sectionFrame

            local secLayout = Instance.new("UIListLayout")
            secLayout.Padding = UDim.new(0, 10)
            secLayout.Parent = sectionContent
            secLayout.SortOrder = Enum.SortOrder.LayoutOrder

            local function updateSectionSize()
                sectionFrame.Size = UDim2.new(0, 410, 0, secLayout.AbsoluteContentSize.Y + 50)
                scrollingFrame.CanvasSize = UDim2.new(0, 0, 0, listLayout.AbsoluteContentSize.Y)
            end
            secLayout.Changed:Connect(updateSectionSize)

            local sectionAPI = {}

            function sectionAPI:AddButton(config)
                local name = config.Name or "Button"
                local callback = config.Callback or function() end

                local button = Instance.new("TextButton")
                button.Size = UDim2.new(0, 390, 0, 35)
                button.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
                button.Text = name
                button.TextColor3 = Color3.fromRGB(220, 220, 220)
                button.Font = Enum.Font.Gotham
                button.TextSize = 14
                button.Parent = sectionContent
                local btnCorner = Instance.new("UICorner")
                btnCorner.CornerRadius = UDim.new(0, 5)
                btnCorner.Parent = button
                button.MouseButton1Click:Connect(function()
                    callback()
                    notify(name .. " pressed!", 2)
                end)
                updateSectionSize()
            end

            function sectionAPI:AddToggle(config)
                local name = config.Name or "Toggle"
                local default = savedConfig[name] or config.Default or false
                local callback = config.Callback or function() end

                if windowConfig.SaveConfig then
                    savedConfig[name] = default
                end

                local toggleFrame = Instance.new("Frame")
                toggleFrame.Size = UDim2.new(0, 390, 0, 35)
                toggleFrame.BackgroundTransparency = 1
                toggleFrame.Parent = sectionContent

                local label = Instance.new("TextLabel")
                label.Size = UDim2.new(0, 300, 1, 0)
                label.BackgroundTransparency = 1
                label.Text = name
                label.TextColor3 = Color3.fromRGB(220, 220, 220)
                label.Font = Enum.Font.Gotham
                label.TextSize = 14
                label.TextXAlignment = Enum.TextXAlignment.Left
                label.Parent = toggleFrame

                local toggleBtn = Instance.new("TextButton")
                toggleBtn.Size = UDim2.new(0, 50, 0, 25)
                toggleBtn.Position = UDim2.new(1, -60, 0, 5)
                toggleBtn.BackgroundColor3 = default and Color3.fromRGB(50, 200, 50) or Color3.fromRGB(200, 50, 50)
                toggleBtn.Text = default and "ON" or "OFF"
                toggleBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
                toggleBtn.Font = Enum.Font.Gotham
                toggleBtn.TextSize = 12
                local togCorner = Instance.new("UICorner")
                togCorner.CornerRadius = UDim.new(0, 5)
                togCorner.Parent = toggleBtn
                toggleBtn.Parent = toggleFrame

                local state = default
                toggleBtn.MouseButton1Click:Connect(function()
                    state = not state
                    toggleBtn.BackgroundColor3 = state and Color3.fromRGB(50, 200, 50) or Color3.fromRGB(200, 50, 50)
                    toggleBtn.Text = state and "ON" or "OFF"
                    if windowConfig.SaveConfig then
                        savedConfig[name] = state
                    end
                    callback(state)
                    notify(name .. ": " .. tostring(state), 2)
                end)
                updateSectionSize()
            end

            function sectionAPI:AddColorpicker(config)
                local name = config.Name or "Colorpicker"
                local default = savedConfig[name] or config.Default or Color3.fromRGB(255, 0, 0)
                local callback = config.Callback or function() end

                if windowConfig.SaveConfig then
                    savedConfig[name] = {default.R, default.G, default.B}
                end

                local colorFrame = Instance.new("Frame")
                colorFrame.Size = UDim2.new(0, 390, 0, 35)
                colorFrame.BackgroundTransparency = 1
                colorFrame.Parent = sectionContent

                local label = Instance.new("TextLabel")
                label.Size = UDim2.new(0, 300, 1, 0)
                label.BackgroundTransparency = 1
                label.Text = name
                label.TextColor3 = Color3.fromRGB(220, 220, 220)
                label.Font = Enum.Font.Gotham
                label.TextSize = 14
                label.TextXAlignment = Enum.TextXAlignment.Left
                label.Parent = colorFrame

                local colorBtn = Instance.new("TextButton")
                colorBtn.Size = UDim2.new(0, 50, 0, 25)
                colorBtn.Position = UDim2.new(1, -60, 0, 5)
                colorBtn.BackgroundColor3 = default
                colorBtn.Text = ""
                local colCorner = Instance.new("UICorner")
                colCorner.CornerRadius = UDim.new(0, 5)
                colCorner.Parent = colorBtn
                colorBtn.Parent = colorFrame

                local pickerFrame = Instance.new("Frame")
                pickerFrame.Size = UDim2.new(0, 150, 0, 100)
                pickerFrame.Position = UDim2.new(1, -160, 0, 40)
                pickerFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                pickerFrame.BorderSizePixel = 0
                pickerFrame.Visible = false
                pickerFrame.Parent = colorFrame
                local pickCorner = Instance.new("UICorner")
                pickCorner.CornerRadius = UDim.new(0, 5)
                pickCorner.Parent = pickerFrame

                local hueBar = Instance.new("Frame")
                hueBar.Size = UDim2.new(0, 20, 1, -10)
                hueBar.Position = UDim2.new(0, 10, 0, 5)
                hueBar.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
                hueBar.Parent = pickerFrame
                local hueGradient = Instance.new("UIGradient")
                hueGradient.Color = ColorSequence.new{
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
                    ColorSequenceKeypoint.new(0.2, Color3.fromRGB(255, 255, 0)),
                    ColorSequenceKeypoint.new(0.4, Color3.fromRGB(0, 255, 0)),
                    ColorSequenceKeypoint.new(0.6, Color3.fromRGB(0, 255, 255)),
                    ColorSequenceKeypoint.new(0.8, Color3.fromRGB(0, 0, 255)),
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 255))
                }
                hueGradient.Rotation = 90
                hueGradient.Parent = hueBar

                local satValFrame = Instance.new("Frame")
                satValFrame.Size = UDim2.new(0, 100, 1, -10)
                satValFrame.Position = UDim2.new(0, 40, 0, 5)
                satValFrame.BackgroundColor3 = default
                satValFrame.Parent = pickerFrame
                local satGradient = Instance.new("UIGradient")
                satGradient.Color = ColorSequence.new{
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
                    ColorSequenceKeypoint.new(1, default)
                }
                satGradient.Parent = satValFrame
                local valGradient = Instance.new("UIGradient")
                valGradient.Color = ColorSequence.new{
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0)),
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))
                }
                valGradient.Rotation = 90
                valGradient.Parent = satValFrame

                local isOpen = false
                colorBtn.MouseButton1Click:Connect(function()
                    isOpen = not isOpen
                    pickerFrame.Visible = isOpen
                end)

                local h, s, v = default:ToHSV()
                local function updateColor()
                    local newColor = Color3.fromHSV(h, s, v)
                    colorBtn.BackgroundColor3 = newColor
                    satValFrame.BackgroundColor3 = Color3.fromHSV(h, 1, 1)
                    satGradient.Color = ColorSequence.new{
                        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
                        ColorSequenceKeypoint.new(1, Color3.fromHSV(h, 1, 1))
                    }
                    if windowConfig.SaveConfig then
                        savedConfig[name] = {newColor.R, newColor.G, newColor.B}
                    end
                    callback(newColor)
                end

                hueBar.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        local draggingHue = true
                        input.Changed:Connect(function()
                            if input.UserInputState == Enum.UserInputState.End then
                                draggingHue = false
                            end
                        end)
                        UserInputService.InputChanged:Connect(function(input)
                            if draggingHue and input.UserInputType == Enum.UserInputType.MouseMovement then
                                local y = math.clamp((input.Position.Y - hueBar.AbsolutePosition.Y) / hueBar.AbsoluteSize.Y, 0, 1)
                                h = 1 - y
                                updateColor()
                            end
                        end)
                    end
                end)

                satValFrame.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        local draggingSatVal = true
                        input.Changed:Connect(function()
                            if input.UserInputState == Enum.UserInputState.End then
                                draggingSatVal = false
                            end
                        end)
                        UserInputService.InputChanged:Connect(function(input)
                            if draggingSatVal and input.UserInputType == Enum.UserInputType.MouseMovement then
                                s = math.clamp((input.Position.X - satValFrame.AbsolutePosition.X) / satValFrame.AbsoluteSize.X, 0, 1)
                                v = 1 - math.clamp((input.Position.Y - satValFrame.AbsolutePosition.Y) / satValFrame.AbsoluteSize.Y, 0, 1)
                                updateColor()
                            end
                        end)
                    end
                end)
                updateSectionSize()
            end

            function sectionAPI:AddSlider(config)
                local name = config.Name or "Slider"
                local min = config.Min or 0
                local max = config.Max or 100
                local default = savedConfig[name] or config.Default or min
                local color = config.Color or Color3.fromRGB(100, 100, 255)
                local increment = config.Increment or 1
                local valueName = config.ValueName or ""
                local callback = config.Callback or function() end

                if windowConfig.SaveConfig then
                    savedConfig[name] = default
                end

                local sliderFrame = Instance.new("Frame")
                sliderFrame.Size = UDim2.new(0, 390, 0, 50)
                sliderFrame.BackgroundTransparency = 1
                sliderFrame.Parent = sectionContent

                local label = Instance.new("TextLabel")
                label.Size = UDim2.new(1, 0, 0, 20)
                label.BackgroundTransparency = 1
                label.Text = name .. ": " .. default .. " " .. valueName
                label.TextColor3 = Color3.fromRGB(220, 220, 220)
                label.Font = Enum.Font.Gotham
                label.TextSize = 14
                label.TextXAlignment = Enum.TextXAlignment.Left
                label.Parent = sliderFrame

                local sliderBar = Instance.new("Frame")
                sliderBar.Size = UDim2.new(1, 0, 0, 10)
                sliderBar.Position = UDim2.new(0, 0, 0, 30)
                sliderBar.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
                local barCorner = Instance.new("UICorner")
                barCorner.CornerRadius = UDim.new(0, 5)
                barCorner.Parent = sliderBar
                sliderBar.Parent = sliderFrame

                local fill = Instance.new("Frame")
                fill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
                fill.BackgroundColor3 = color
                fill.BorderSizePixel = 0
                local fillCorner = Instance.new("UICorner")
                fillCorner.CornerRadius = UDim.new(0, 5)
                fillCorner.Parent = fill
                fill.Parent = sliderBar

                local draggingSlider = false
                sliderBar.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        draggingSlider = true
                    end
                end)
                sliderBar.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        draggingSlider = false
                    end
                end)

                UserInputService.InputChanged:Connect(function(input)
                    if draggingSlider and input.UserInputType == Enum.UserInputType.MouseMovement then
                        local mouseX = input.Position.X - sliderBar.AbsolutePosition.X
                        local percent = math.clamp(mouseX / sliderBar.AbsoluteSize.X, 0, 1)
                        fill.Size = UDim2.new(percent, 0, 1, 0)
                        local value = min + math.floor((max - min) * percent / increment) * increment
                        label.Text = name .. ": " .. value .. " " .. valueName
                        if windowConfig.SaveConfig then
                            savedConfig[name] = value
                        end
                        callback(value)
                    end
                end)
                updateSectionSize()
            end

            function sectionAPI:AddLabel(text)
                local label = Instance.new("TextLabel")
                label.Size = UDim2.new(0, 390, 0, 25)
                label.BackgroundTransparency = 1
                label.Text = text or "Label"
                label.TextColor3 = Color3.fromRGB(220, 220, 220)
                label.Font = Enum.Font.Gotham
                label.TextSize = 14
                label.TextXAlignment = Enum.TextXAlignment.Left
                label.Parent = sectionContent
                updateSectionSize()
            end

            function sectionAPI:AddParagraph(title, content)
                local paraFrame = Instance.new("Frame")
                paraFrame.Size = UDim2.new(0, 390, 0, 60)
                paraFrame.BackgroundTransparency = 1
                paraFrame.Parent = sectionContent

                local titleLabel = Instance.new("TextLabel")
                titleLabel.Size = UDim2.new(1, 0, 0, 20)
                titleLabel.BackgroundTransparency = 1
                titleLabel.Text = title or "Paragraph"
                titleLabel.TextColor3 = Color3.fromRGB(220, 220, 220)
                titleLabel.Font = Enum.Font.GothamBold
                titleLabel.TextSize = 14
                titleLabel.TextXAlignment = Enum.TextXAlignment.Left
                titleLabel.Parent = paraFrame

                local contentLabel = Instance.new("TextLabel")
                contentLabel.Size = UDim2.new(1, 0, 0, 40)
                contentLabel.Position = UDim2.new(0, 0, 0, 20)
                contentLabel.BackgroundTransparency = 1
                contentLabel.Text = content or "Content"
                contentLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
                contentLabel.Font = Enum.Font.Gotham
                contentLabel.TextSize = 12
                contentLabel.TextXAlignment = Enum.TextXAlignment.Left
                contentLabel.TextWrapped = true
                contentLabel.Parent = paraFrame
                updateSectionSize()
            end

            function sectionAPI:AddDropdown(config)
                local name = config.Name or "Dropdown"
                local default = savedConfig[name] or config.Default or (config.Options and config.Options[1]) or "Select"
                local options = config.Options or {"Option 1", "Option 2"}
                local callback = config.Callback or function() end

                if windowConfig.SaveConfig then
                    savedConfig[name] = default
                end

                local dropFrame = Instance.new("Frame")
                dropFrame.Size = UDim2.new(0, 390, 0, 35)
                dropFrame.BackgroundTransparency = 1
                dropFrame.Parent = sectionContent

                local label = Instance.new("TextLabel")
                label.Size = UDim2.new(0, 300, 1, 0)
                label.BackgroundTransparency = 1
                label.Text = name
                label.TextColor3 = Color3.fromRGB(220, 220, 220)
                label.Font = Enum.Font.Gotham
                label.TextSize = 14
                label.TextXAlignment = Enum.TextXAlignment.Left
                label.Parent = dropFrame

                local dropButton = Instance.new("TextButton")
                dropButton.Size = UDim2.new(0, 80, 0, 25)
                dropButton.Position = UDim2.new(1, -90, 0, 5)
                dropButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
                dropButton.Text = default
                dropButton.TextColor3 = Color3.fromRGB(220, 220, 220)
                dropButton.Font = Enum.Font.Gotham
                dropButton.TextSize = 14
                local dropCorner = Instance.new("UICorner")
                dropCorner.CornerRadius = UDim.new(0, 5)
                dropCorner.Parent = dropButton
                dropButton.Parent = dropFrame

                local dropList = Instance.new("Frame")
                dropList.Size = UDim2.new(0, 80, 0, 0)
                dropList.Position = UDim2.new(1, -90, 0, 35)
                dropList.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                dropList.BorderSizePixel = 0
                dropList.ClipsDescendants = true
                dropList.Visible = false
                dropList.Parent = dropFrame
                local listCorner = Instance.new("UICorner")
                listCorner.CornerRadius = UDim.new(0, 5)
                listCorner.Parent = dropList

                local listLayout = Instance.new("UIListLayout")
                listLayout.Parent = dropList

                local isOpen = false
                dropButton.MouseButton1Click:Connect(function()
                    isOpen = not isOpen
                    dropList.Visible = isOpen
                    local tween = TweenService:Create(dropList, TweenInfo.new(0.2), {Size = UDim2.new(0, 80, 0, isOpen and #options * 30 or 0)})
                    tween:Play()
                end)

                for i, option in pairs(options) do
                    local optButton = Instance.new("TextButton")
                    optButton.Size = UDim2.new(1, 0, 0, 30)
                    optButton.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                    optButton.Text = option
                    optButton.TextColor3 = Color3.fromRGB(220, 220, 220)
                    optButton.Font = Enum.Font.Gotham
                    optButton.TextSize = 14
                    optButton.BorderSizePixel = 0
                    optButton.Parent = dropList
                    optButton.MouseButton1Click:Connect(function()
                        dropButton.Text = option
                        isOpen = false
                        dropList.Visible = false
                        dropList.Size = UDim2.new(0, 80, 0, 0)
                        if windowConfig.SaveConfig then
                            savedConfig[name] = option
                        end
                        callback(option)
                        notify(name .. ": " .. option, 2)
                    end)
                end
                updateSectionSize()
            end

            return sectionAPI
        end

        tabAPI.AddButton = function(config) tabAPI:AddSection({Name = ""}):AddButton(config) end
        tabAPI.AddToggle = function(config) tabAPI:AddSection({Name = ""}):AddToggle(config) end
        tabAPI.AddColorpicker = function(config) tabAPI:AddSection({Name = ""}):AddColorpicker(config) end
        tabAPI.AddSlider = function(config) tabAPI:AddSection({Name = ""}):AddSlider(config) end
        tabAPI.AddLabel = function(text) tabAPI:AddSection({Name = ""}):AddLabel(text) end
        tabAPI.AddParagraph = function(title, content) tabAPI:AddSection({Name = ""}):AddParagraph(title, content) end
        tabAPI.AddDropdown = function(config) tabAPI:AddSection({Name = ""}):AddDropdown(config) end

        return tabAPI
    end

    -- Open Animation
    frame.Position = UDim2.new(0.5, -300, 0.5, 200)
    local tween = TweenService:Create(frame, TweenInfo.new(0.5, Enum.EasingStyle.Quad), {Position = UDim2.new(0.5, -300, 0.5, -200)})
    tween:Play()

    return Window
end

return NeoxLib
